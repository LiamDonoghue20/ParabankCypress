/// <reference types="cypress" />
describe('Cypress API', () => {
  before(() => {
    cy.visit(
      'https://glebbahmutov.com/cypress-examples/9.0.0/cypress-api/index',
    )
  })

  describe('Custom commands', () => {
    it('add command', () => {
      Cypress.Commands.add(
        'console',
        {
          prevSubject: true,
        },
        (subject, method) => {
          method = method || 'log'

          // log the subject to the console
          console[method]('The subject is', subject)
          return subject
        },
      )
      // prints the object to the window console
      cy.wrap({ life: 42 }).console('info')
    })

    it('calling other commands', () => {
      Cypress.Commands.add('name', () => 'Joe')
      Cypress.Commands.add('greeting', () =>
        // call the custom command cy.name
        // then form the full greeting text and yield it
        cy.name().then((n) => `Hello, ${n}`),
      )
      cy.greeting().should('equal', 'Hello, Joe')
    })
  })

  it('debug', () => {
    // Cypress will now log in the console when
    // cookies are set or removed
    Cypress.Cookies.debug(true)

    cy.setCookie('fakeCookie', '123ABC')
    cy.clearCookie('fakeCookie')
    cy.setCookie('fakeCookie', '123ABC')
    cy.clearCookie('fakeCookie')
    cy.setCookie('fakeCookie', '123ABC')
  })

  it('preserveOnce', () => {
    cy.getCookie('fakeCookie').should('not.be.ok')

    // preserving a cookie will not clear it when
    // the next test starts
    cy.setCookie('lastCookie', '789XYZ')
    Cypress.Cookies.preserveOnce('lastCookie')
  })

  it('cookies defaults', () => {
    Cypress.Cookies.defaults({
      preserve: 'session_id',
    })
  })

  describe('Cypress.arch', () => {
    it('Get the architecture name', () => {
      // https://on.cypress.io/arch
      expect(Cypress.arch).to.exist
    })
  })

  it('Cypress.config', () => {
    var myConfig = Cypress.config()

    expect(myConfig).to.have.property('animationDistanceThreshold', 5)
    expect(myConfig).to.have.property('defaultCommandTimeout', 4000)
    expect(myConfig).to.have.property('requestTimeout', 5000)
    expect(myConfig).to.have.property('responseTimeout', 30000)
    expect(myConfig).to.have.property('viewportHeight', 1000)
    expect(myConfig).to.have.property('viewportWidth', 1000)
    expect(myConfig).to.have.property('pageLoadTimeout', 60000)
    expect(myConfig).to.have.property('waitForAnimations', true)
    // we can check if the property is present without checking its value
    expect(myConfig).to.have.property('baseUrl')

    // setting and getting an individual property
    expect(Cypress.config('pageLoadTimeout')).to.eq(60000)

    Cypress.config('pageLoadTimeout', 20000)

    expect(Cypress.config('pageLoadTimeout')).to.eq(20000)

    Cypress.config('pageLoadTimeout', 60000)
  })

  it('Cypress.dom.isHidden', () => {
    let hiddenP = Cypress.$('.dom-p p.hidden').get(0)
    let visibleP = Cypress.$('.dom-p p.visible').get(0)

    // our first paragraph has css class 'hidden'
    expect(Cypress.dom.isHidden(hiddenP)).to.be.true
    expect(Cypress.dom.isHidden(visibleP)).to.be.false
  })

  it('Cypress.env', () => {
    // set multiple environment variables
    Cypress.env({
      host: 'veronica.dev.local',
      api_server: 'http://localhost:8888/v1/',
    })

    // get environment variable
    expect(Cypress.env('host')).to.eq('veronica.dev.local')

    // set environment variable
    Cypress.env('api_server', 'http://localhost:8888/v2/')
    expect(Cypress.env('api_server')).to.eq(
      'http://localhost:8888/v2/',
    )

    // get all environment variable
    expect(Cypress.env()).to.have.property(
      'host',
      'veronica.dev.local',
    )
    expect(Cypress.env()).to.have.property(
      'api_server',
      'http://localhost:8888/v2/',
    )
  })

  describe('Cypress.platform', () => {
    it('Get underlying OS name', () => {
      // https://on.cypress.io/platform
      expect(Cypress.platform).to.be.exist
    })
  })

  it('Cypress.platform', () => {
    // for example "darwin" on Mac
    expect(Cypress.platform).to.exist
  })

  describe('Cypress.version', () => {
    it('Get current version of Cypress being run', () => {
      // https://on.cypress.io/version
      expect(Cypress.version).to.be.exist
    })
  })

  describe('Cypress.spec', () => {
    it('Get current spec information', () => {
      // https://on.cypress.io/spec
      // wrap the object so we can inspect it easily by clicking in the command log
      cy.wrap(Cypress.spec).should('include.keys', [
        'name',
        'relative',
        'absolute',
      ])
    })

    it('Multiple specs', () => {
      if (Cypress.spec.absolute === '__all') {
        cy.log('Running several specs together')
      } else {
        cy.log(`Running a single spec ${Cypress.spec.relative}`)
      }
    })
  })

  describe('Cypress.currentTest', () => {
    it('Get the current test information', () => {
      // https://on.cypress.io/currenttest
      // wrap the object so we can inspect it easily by clicking in the command log
      cy.wrap(Cypress.currentTest)
        .should('include.keys', ['title', 'titlePath'])
        .then((currentTest) => {
          expect(currentTest).to.have.property(
            'title',
            'Get the current test information',
          )
          // get the entire full title, including the parent suite titles
          expect(currentTest)
            .to.have.property('titlePath')
            .to.deep.equal([
              'Cypress API', // the top suite
              'Cypress.currentTest', // the parent suite
              'Get the current test information', // the test title
            ])
        })
    })
  })

  it('Cypress.testingType', () => {
    expect(Cypress.testingType).to.be.oneOf(['e2e', 'component'])
  })
})
