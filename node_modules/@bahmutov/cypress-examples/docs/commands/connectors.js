/// <reference types="cypress" />
describe('Connectors', () => {
  before(() => {
    cy.visit(
      'https://glebbahmutov.com/cypress-examples/9.0.0/commands/connectors',
    )
  })

  it('each', () => {
    cy.get('.connectors-each-ul>li').each(function (
      $el,
      index,
      $list,
    ) {
      console.log($el, index, $list)
    })
  })

  describe('its', () => {
    it('number of elements', () => {
      cy.get('.connectors-its-ul>li')
        // calls the 'length' property returning that value
        .its('length')
        .should('be.gt', 2)
      // tip: this is an equivalent assertion
      cy.get('.connectors-its-ul>li').should('have.length.gt', 2)
    })

    it('nested property', () => {
      const person = {
        name: {
          first: 'Joe',
          last: 'Smith',
        },
        organizationIds: [
          {
            id: 1,
            name: 'Acme, inc',
          },
          {
            id: 2,
            name: 'IEEE',
          },
        ],
      }
      cy.wrap(person)
        // grab nested property using "." notation
        .its('name.first')
        .should('equal', 'Joe')
      // the dot notation works with arrays
      cy.wrap(person)
        .its('organizationIds.1.name')
        .should('equal', 'IEEE')
    })
  })

  it('invoke', () => {
    cy.get('.connectors-div')
      .should('be.hidden')
      // call the jquery method 'show' on the 'div.container'
      .invoke('show')
      .should('be.visible')
  })

  it('spread', () => {
    const arr = ['foo', 'bar', 'baz']

    cy.wrap(arr).spread(function (foo, bar, baz) {
      expect(foo).to.eq('foo')
      expect(bar).to.eq('bar')
      expect(baz).to.eq('baz')
    })
  })

  it('then', () => {
    cy.log('**Callback**')
    cy.get('.connectors-list>li').then(function ($lis) {
      expect($lis).to.have.length(3)
      expect($lis.eq(0)).to.contain('Walk the dog')
      expect($lis.eq(1)).to.contain('Feed the cat')
      expect($lis.eq(2)).to.contain('Write JavaScript')
    })
    cy.log('**Return value**')
    cy.wrap(1)
      .then((num) => {
        expect(num).to.equal(1)

        return 2
      })
      .then((num) => {
        expect(num).to.equal(2)
      })
    cy.log('**Returning undefined**')
    cy.wrap(1)
      .then((num) => {
        expect(num).to.equal(1)
        // note that nothing is returned from this callback
      })
      .then((num) => {
        // this callback receives the original unchanged value 1
        expect(num).to.equal(1)
      })
    cy.log('**Returning wrapped value**')
    cy.wrap(1)
      .then((num) => {
        expect(num).to.equal(1)
        // note how we run a Cypress command
        // the result yielded by this Cypress command
        // will be passed to the second ".then"
        cy.wrap(2)
      })
      .then((num) => {
        // this callback receives the value yielded by "cy.wrap(2)"
        expect(num).to.equal(2)
      })
  })
})
