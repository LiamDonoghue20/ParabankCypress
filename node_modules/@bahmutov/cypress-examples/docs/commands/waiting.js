/// <reference types="cypress" />
describe('Waiting', () => {
  before(() => {
    cy.visit(
      'https://glebbahmutov.com/cypress-examples/9.0.0/commands/waiting',
    )
  })

  describe('cy.wait()', () => {
    it('wait for a specific amount of time', () => {
      cy.get('.wait-input1').type('Wait 1000ms after typing')
      cy.wait(1000)
      cy.get('.wait-input2').type('Wait 1000ms after typing')
      cy.wait(1000)
      cy.get('.wait-input3').type('Wait 1000ms after typing')
      cy.wait(1000)
    })

    it('wait keeps the subject', () => {
      cy.wrap('Hello').wait(100).should('equal', 'Hello')
      cy.get('#wait-subject')
        .wait(100)
        .should('have.text', 'The subject')
      // if there is no subject, yields undefined
      cy.wait(100).should('equal', undefined)
    })

    it('waiting for specific route', () => {
      cy.server()

      // Listen to GET to comments/1
      cy.route('GET', 'comments/*').as('getComment')

      // we have code that gets a comment when
      // the button is clicked in scripts.js
      cy.get('.network-btn').click()

      // wait for GET comments/1
      cy.wait('@getComment').its('status').should('eq', 200)
    })
  })

  describe('cy.wrap', () => {
    it('a promise', () => {
      const asyncAdd = (a, b) => Promise.resolve(a + b)
      const asyncSub = (a, b) => {
        return new Promise((resolve) => {
          setTimeout(() => resolve(a - b), 1000)
        })
      }

      cy.wrap(asyncAdd(2, 3)).should('equal', 5)
      cy.wrap(asyncSub(2, 3)).should('equal', -1)
    })
  })
})
