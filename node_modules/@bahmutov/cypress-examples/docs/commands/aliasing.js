/// <reference types="cypress" />
describe('Aliasing', () => {
  before(() => {
    cy.visit(
      'https://glebbahmutov.com/cypress-examples/9.0.0/commands/aliasing',
    )
  })

  it('.as() - alias a DOM element for later use', () => {
    // Alias a DOM element for use later
    // We don't have to traverse to the element
    // later in our code, we reference it with @

    cy.get('.as-table')
      .find('tbody>tr')
      .first()
      .find('td')
      .first()
      .find('button')
      .as('firstBtn')

    // when we reference the alias, we place an
    // @ in front of its name
    cy.get('@firstBtn').click()

    cy.get('@firstBtn')
      .should('have.class', 'btn-success')
      .and('contain', 'Changed')
  })

  it('.as() - query the alias', () => {
    cy.get('[data-cy=query-the-alias]').as('fruits')
    // now we can use cy.get to grab the DOM element
    cy.get('@fruits')
      .should('have.prop', 'tagName', 'UL')
      .and('be.visible')
    // find child elements
    cy.get('@fruits').find('li').should('have.length', 3)
    cy.get('@fruits').contains('li', 'Banana')
    cy.get('@fruits').contains('li', 'Grape')
    cy.log('**equivalent code using cy.within**')
    cy.get('[data-cy=query-the-alias]').within(() => {
      cy.root().should('have.prop', 'tagName', 'UL').and('be.visible')
      cy.get('li').should('have.length', 3)
      cy.contains('li', 'Banana')
      cy.contains('li', 'Grape')
    })
  })

  it('.as() - alias a route for later use', () => {
    // Alias the route to wait for its response
    cy.server()
    cy.route('GET', 'comments/*').as('getComment')

    // we have code that gets a comment when
    // the button is clicked in scripts.js
    cy.get('.network-btn').click()

    // https://on.cypress.io/wait
    cy.wait('@getComment').its('status').should('eq', 200)
  })

  it('.as() - alias a value for later use', () => {
    // retrieve the element's text and convert into a number
    cy.get('[data-cy=magic-number]')
      .invoke('text')
      .then(parseInt)
      .as('magicNumber')
    // saved the value 42 under an alias
    // retrieve it some time later
    cy.get('@magicNumber').should('equal', 42)
  })

  it('.as() - alias is saved in the test context', () => {
    cy.get('[data-cy=test-context] li')
      .first()
      .invoke('text')
      .as('first')
    cy.get('[data-cy=test-context] li')
      .eq(1)
      .invoke('text')
      .as('second')
      .then(function () {
        // by the time this callback runs
        // both "first" and "second" properties are set
        // notice the "function () {...}" syntax
        // to get the "this" to point at the test context object
        expect(this.first)
          .to.equal('Purple') // sanity check
          .and.not.equal(this.second)
      })
    cy.log('**using callbacks**')
    cy.get('[data-cy=test-context] li')
      .first()
      .invoke('text')
      .then((first) => {
        cy.get('[data-cy=test-context] li')
          .eq(1)
          .invoke('text')
          .then((second) => {
            expect(first)
              .to.equal('Purple') // sanity check
              .and.not.equal(second)
          })
      })
    let first, second
    cy.log('**using variables**')
    cy.get('[data-cy=test-context] li')
      .first()
      .invoke('text')
      .then((x) => (first = x))

    cy.get('[data-cy=test-context] li')
      .eq(1)
      .invoke('text')
      .then((x) => (second = x))

    // by the time this callback runs, both local
    // variables are set
    cy.then((second) => {
      expect(first)
        .to.equal('Purple') // sanity check
        .and.not.equal(second)
    })
  })
})
