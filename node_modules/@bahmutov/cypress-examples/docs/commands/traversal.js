/// <reference types="cypress" />
describe('Traversal', () => {
  before(() => {
    cy.visit(
      'https://glebbahmutov.com/cypress-examples/9.0.0/commands/traversal',
    )
  })

  it('children', () => {
    cy.get('.traversal-breadcrumb')
      .children('.active')
      .should('contain', 'Data')
  })

  it('closest', () => {
    cy.get('.traversal-badge')
      .closest('ul')
      .should('have.class', 'list-group')
  })

  it('eq', () => {
    cy.get('.traversal-list>li').eq(1).should('contain', 'siamese')
  })

  describe('filter', () => {
    it('by class', () => {
      cy.get('.traversal-nav > li a')
        .filter('.active')
        .should('contain', 'About')
    })

    it('elements with an attribute', () => {
      cy.get('#filter-attribute tr')
        // only interested in the elements
        // that have the attribute "line"
        .filter('[line]')
        .should('have.length', 3)
    })

    it('visible elements', () => {
      cy.get('.visible-items li')
        .should('have.length', 4) // all LI items
        // from all found elements, find only the visible ones
        .filter(':visible')
        .should('have.length', 2) // only 2 visible LI items
      cy.log('**single :visible selector query**')
      // use a single CSS + :visible jQuery selector
      cy.get('.visible-items li:visible')
        // only 2 visible LI items
        .should('have.length', 2)
    })
  })

  it('find', () => {
    // 5 individual links plus "prev" and "next" links
    cy.get('.traversal-pagination')
      .find('li.page-item')
      .find('a')
      .should('have.length', 7)
  })

  it('find returns list items', () => {
    cy.get('ul#a-list').find('li').should('have.length', 3)
  })

  it('finds elements in each parent element', () => {
    cy.get('ul#anchors li')
      .should('have.length', 3)
      // inside each LI element, find the A elements
      .find('a')
      .should('have.length', 6)
  })

  it('finds elements with href attribute for every LI', () => {
    cy.get('ul#links li')
      .should('have.length', 3)
      // inside each LI element, find the elements with href attribute
      .find('[href]')
      .should('have.length', 4)
  })

  it('first', () => {
    cy.get('.traversal-table td').first().should('contain', '1')
  })

  it(':first CSS selector', () => {
    // get the first table cell using the :first CSS selector
    cy.get('.traversal-table td:first').should('have.text', '1')
    // get the first row
    cy.get('.traversal-table tbody tr:first').contains('td', 'Lane')
  })

  it('last', () => {
    cy.get('.traversal-buttons .btn')
      .last()
      .should('contain', 'Submit')
    // you can also use the CSS selector :last to avoid
    // using a separate .last() command
    cy.get('.traversal-buttons .btn:last').should('contain', 'Submit')
  })

  it('.next() - get next sibling DOM element', () => {
    cy.get('.traversal-ul')
      .contains('apples')
      .next()
      .should('contain', 'oranges')
  })

  it('.nextAll() - get all next sibling DOM elements', () => {
    cy.get('.traversal-next-all')
      .contains('oranges')
      .nextAll()
      .should('have.length', 3)
  })

  it('.nextUntil() - get next sibling DOM elements until next el', () => {
    cy.get('#veggies').nextUntil('#nuts').should('have.length', 3)
  })

  describe('.not()', () => {
    it('remove DOM elements from set of DOM elements', () => {
      cy.get('.traversal-disabled .btn')
        .not('[disabled]')
        .should('not.contain', 'Disabled')
    })

    it('find incomplete items', () => {
      cy.get('#todo-items').within(() => {
        // there are two completed items
        cy.get('.todo.completed').should('have.length', 2)
        // but how do we find the incomplete items?
        // 1. select all elements with class "todo"
        // 2. remove all elements with class "completed"
        cy.get('.todo').not('.completed').should('have.length', 1)
        // ALTERNATIVE: a slightly more robust way that does not split the query
        // commands; we can use the jQuery ":not" selector
        cy.get('.todo:not(.completed)').should('have.length', 1)
      })
    })
  })

  it('.parent() - get parent DOM element from DOM elements', () => {
    cy.get('.traversal-mark')
      .parent()
      .should('contain', 'Morbi leo risus')
  })

  it('.parents() - get parent DOM elements from DOM elements', () => {
    cy.get('.traversal-cite').parents().should('match', 'blockquote')
  })

  it('.parentsUntil() - get parent DOM elements from DOM elements until el', () => {
    cy.get('.clothes-nav')
      .find('.active')
      .parentsUntil('.clothes-nav')
      .should('have.length', 2)
  })

  it('.prev() - get previous sibling DOM element', () => {
    cy.get('.birds')
      .find('.active')
      .prev()
      .should('contain', 'Lorikeets')
  })

  it('.prevAll() - get all previous sibling DOM elements', () => {
    cy.get('.fruits-list')
      .find('.third')
      .prevAll()
      .should('have.length', 2)
  })

  it('.prevUntil() - get all previous sibling DOM elements until el', () => {
    cy.get('.foods-list')
      .find('#nuts')
      .prevUntil('#veggies')
      .should('have.length', 3)
  })

  it('.siblings() - get all sibling DOM elements', () => {
    cy.get('.traversal-pills .active')
      .siblings()
      .should('have.length', 2)
  })
})
