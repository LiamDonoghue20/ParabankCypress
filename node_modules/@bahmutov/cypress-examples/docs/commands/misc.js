/// <reference types="cypress" />
describe('Misc', () => {
  before(() => {
    cy.visit(
      'https://glebbahmutov.com/cypress-examples/9.0.0/commands/misc',
    )
  })

  describe('.log()', () => {
    it('prints a string', () => {
      cy.log('this is a string')
      // you can use a small subset of Markdown: italics, bold
      cy.log('this is **important**')
      // you can pass arguments
      const user = { name: 'Joe', age: 20 }
      cy.log('user object', user)
      cy.log('name', user.name, 'age', user.age)
      // or form the message yourself
      cy.log(`name \`${user.name}\` age \`${user.age}\``)
    })

    it('binds the primitive value', () => {
      // ⛔️ INCORRECT - PRINTS NULL
      let username = null
      cy.get('#username').then(($el) => (username = $el.text()))
      cy.log(username) // always prints null ⚠️
      // ✅ CORRECT - prints "Mary"
      cy.get('#username')
        .then(($el) => (username = $el.text()))
        .then(() => {
          // by this point the "username" primitive variable
          // has been set, and the call is made cy.log("Mary")
          cy.log(username)
        })
    })

    it('prints an object', () => {
      const user = { name: null }
      cy.get('#last-user').then(($el) => (user.name = $el.text()))
      cy.log(user) // prints { user: "Mary" }
    })
  })

  it('.end() - end the command chain', () => {
    // cy.end is useful when you want to end a chain of commands
    // and force Cypress to re-query from the root element
    cy.get('.misc-table').within(() => {
      // ends the current chain and yields null
      cy.contains('Cheryl').click().end()

      // queries the entire table again
      cy.contains('Charles').click()
    })
  })

  it('cy.exec() - execute a system command', () => {
    // execute a system command.
    // so you can take actions necessary for
    // your test outside the scope of Cypress.
    // https://on.cypress.io/exec

    // we can use Cypress.platform string to
    // select appropriate command
    // https://on.cypress/io/platform
    cy.log(
      `Platform ${Cypress.platform} architecture ${Cypress.arch}`,
    )

    // on CircleCI Windows build machines we have a failure to run bash shell
    // https://github.com/cypress-io/cypress/issues/5169
    // so skip some of the tests by passing flag "--env circle=true"
    const isCircleOnWindows =
      Cypress.platform === 'win32' && Cypress.env('circle')

    if (isCircleOnWindows) {
      cy.log('Skipping test on CircleCI')

      return
    }

    // cy.exec problem on Shippable CI
    // https://github.com/cypress-io/cypress/issues/6718
    const isShippable =
      Cypress.platform === 'linux' && Cypress.env('shippable')

    if (isShippable) {
      cy.log('Skipping test on ShippableCI')

      return
    }

    cy.exec('echo Jane Lane')
      .its('stdout')
      .should('contain', 'Jane Lane')

    if (Cypress.platform === 'win32') {
      cy.exec('print cypress.json').its('stderr').should('be.empty')
    } else {
      cy.exec('cat cypress.json').its('stderr').should('be.empty')

      cy.exec('pwd').its('code').should('eq', 0)
    }
  })

  it('cy.focused() - get the DOM element that has focus', () => {
    // https://on.cypress.io/focused
    cy.get('.misc-form').find('#name').click()
    cy.focused().should('have.id', 'name')

    cy.get('.misc-form').find('#description').click()
    cy.focused()
      // we can check if the focused element has a specific ID
      .should('have.id', 'description')
      // or if it matches the entire given CSS selector
      .and('match', '.misc-form textarea#description')
  })

  describe('Cypress.Screenshot', () => {
    it('cy.screenshot() - take a screenshot', () => {
      cy.screenshot('my-image')
    })

    it('Cypress.Screenshot.defaults() - change default config of screenshots', () => {
      Cypress.Screenshot.defaults({
        blackout: ['.foo'],
        capture: 'viewport',
        clip: { x: 0, y: 0, width: 200, height: 200 },
        scale: false,
        disableTimersAndAnimations: true,
        screenshotOnRunFailure: true,
        beforeScreenshot() {},
        afterScreenshot() {},
      })
    })
  })

  describe('cy.wrap()', () => {
    it('wrap an object', () => {
      // https://on.cypress.io/wrap
      cy.wrap({ foo: 'bar' })
        .should('have.property', 'foo')
        .and('include', 'bar')
      cy.wrap(42).should('equal', 42)
    })

    it('invoke a method', () => {
      cy.wrap({
        name: 'Joe',
        getName() {
          return this.name
        },
      })
        .invoke('getName')
        .should('equal', 'Joe')

      // the method could be a function
      const getMagicNumber = () => 42
      cy.wrap({
        getNumber: getMagicNumber,
      })
        .invoke('getNumber')
        .should('equal', 42)

      // you can wrap the object as alias
      cy.wrap({
        name: 'Joe',
        getName() {
          return this.name
        },
        getNumber: getMagicNumber,
      }).as('wrappedObject')
      // some time later get the alias and use it
      cy.get('@wrappedObject').its('name').should('equal', 'Joe')
      cy.get('@wrappedObject')
        .invoke('getName')
        .should('equal', 'Joe')
      cy.get('@wrappedObject').invoke('getNumber').should('equal', 42)
    })

    it('DOM object', () => {
      // first, let's imagine we got the reference to the LI element
      // using DOM traversal method instead of cy.get
      cy.document().then((doc) => {
        const div = doc.querySelector('#wrap-dom-example')
        expect(Cypress.dom.isElement(div), 'is element').to.be.true
        expect(Cypress.dom.isJquery(div), 'is wrapped in jQuery').to
          .be.false
        // if we want to use cy.contains to find specific text
        // we can use cy.wrap first
        cy.wrap(div)
          .contains('some text')
          .should('have.class', 'inner')
        // we can wrap the element to use jQuery assertions
        cy.wrap(div).should('have.id', 'wrap-dom-example')
      })
    })

    it('waits on a promise automatically', () => {
      const p = new Promise((resolve) => {
        setTimeout(() => {
          resolve('Hello')
        }, 1000)
      })
      cy.wrap(p).should('equal', 'Hello')
    })

    it('using Cypress.Promise', () => {
      const p = Cypress.Promise.resolve(42).delay(450)
      cy.wrap(p)
        .should('equal', 42)
        // you can wrap the already resolved promise
        .then(() => {
          cy.wrap(p).should('be.a', 'number').and('equal', 42)
        })
    })

    it('promises are eager', () => {
      cy.wait(1000)
        .then(() => {
          // create the promise after the previous command
          // cy.wait(1000) has finished
          cy.wrap(Cypress.Promise.resolve('starts now').delay(1000))
          // note that wrapped value is automatically yielded
          // to the command or assertion in the command chain
        })
        .should('equal', 'starts now')
      // wait one second
      // create the promise, wait for it to resolve
      // then assert the yielded value
      cy.wait(1000)
        .then(() => {
          // create the promise after the previous command
          // cy.wait(1000) has finished
          return Cypress.Promise.resolve('starts now').delay(1000)
        })
        .should('equal', 'starts now')
    })
  })
})
